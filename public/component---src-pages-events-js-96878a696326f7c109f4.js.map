{"version":3,"file":"component---src-pages-events-js-96878a696326f7c109f4.js","mappings":"wMAoCA,MA7BkBA,IAAsC,IAArC,MAAEC,EAAK,MAAEC,EAAK,cAAEC,GAAeH,EAC9C,MAAMI,GAAqC,IAAxBH,EAAMI,cACnBC,EAAeL,EAAMM,WAAa,GAAwB,IAAnBN,EAAMO,SAC7CC,EAAc,qBAAoBR,EAAMS,UAE9C,OACIC,EAAAA,cAAA,OAAKC,UAAU,cACXD,EAAAA,cAACE,EAAAA,EAAW,CAACX,MAAOA,EAAOY,IAAKb,EAAMc,aACtCJ,EAAAA,cAAA,UAAKR,GACLQ,EAAAA,cAAA,UAAKV,EAAMe,OACXL,EAAAA,cAAA,SAAIV,EAAMgB,aAERX,GACEK,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,KAAGC,UAAU,cAAaD,EAAAA,cAAA,cAAQ,mBAAwB,IAAEV,EAAMM,YAClEI,EAAAA,cAACO,EAAAA,KAAI,CAACC,GAAIV,EAAYW,GAAG,aAAaR,UAAU,eAAc,mBAGrER,GACGO,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,KAAGC,UAAU,cAAaD,EAAAA,cAAA,cAAQ,mBAAwB,IAAEV,EAAMM,YAClEI,EAAAA,cAAA,KAAGC,UAAU,YAAWD,EAAAA,cAAA,cAAQ,UAAe,KAAGV,EAAMO,UACxDG,EAAAA,cAACO,EAAAA,KAAI,CAACC,GAAIV,EAAYW,GAAG,aAAaR,UAAU,eAAc,gBAGpE,ECsDd,MA/EkBS,KACd,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cA0C5B,OACIZ,EAAAA,cAACa,EAAAA,EAAM,KACHb,EAAAA,cAAA,eACIA,EAAAA,cAAA,OAAKS,GAAG,eACJT,EAAAA,cAACE,EAAAA,EAAW,CAACX,OAAOuB,EAAAA,EAAAA,GAASH,EAAKI,WAAYZ,IAAI,GAAGF,UAAU,iBAC/DD,EAAAA,cAAA,OAAKC,UAAU,aACXD,EAAAA,cAAA,OAAKC,UAAU,gBACfD,EAAAA,cAAA,UAAI,mBACJA,EAAAA,cAAA,SAAG,qDACmDA,EAAAA,cAAA,WAAM,mJAKpEA,EAAAA,cAAA,OAAKC,UAAU,wBACVU,EAAKK,cAAcC,MAAMC,KAAIC,IAC1B,MAAMC,EAAY,IAAIC,KAAKF,EAAKG,UAU1B9B,EAAgB,IAAI+B,KAAKC,eAAe,QAT1B,CAChBC,QAAS,OACTC,IAAK,UACLC,MAAO,QACPC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAGwDC,OAAOX,GACrEY,EAAYrB,EAAKsB,QAAQhB,MAAMiB,MAAKC,GAAKA,EAAEC,eAAiBjB,EAAK5B,QACvE,OAAOS,EAAAA,cAACqC,EAAS,CAACC,IAAKnB,EAAKV,GAAInB,MAAO6B,EAAM5B,OAAOuB,EAAAA,EAAAA,GAASkB,GAAYxC,cAAeA,GAAiB,MAIhH,C","sources":["webpack://bella-bakes/./src/components/EventCard.js","webpack://bella-bakes/./src/pages/events.js"],"sourcesContent":["// src/components/EventCard.js\r\n\r\nimport React from 'react';\r\nimport { GatsbyImage } from 'gatsby-plugin-image';\r\nimport { Link } from 'gatsby';\r\nimport './css/eventcard.css';\r\n\r\nconst EventCard = ({ event, image, formattedDate }) => {\r\n    const isTicketed = event.ticketedevent === true;\r\n    const limitedSeats = event.maxtickets > 0 && event.entryfee === 0;\r\n    const bookingURL = `/bookings?eventId=${event.eventID}`\r\n\r\n    return (\r\n        <div className=\"event-card\">\r\n            <GatsbyImage image={image} alt={event.imgalttext} />\r\n            <h4>{formattedDate}</h4>\r\n            <h3>{event.title}</h3>\r\n            <p>{event.description}</p>\r\n\r\n            { limitedSeats && (\r\n                <>\r\n                    <p className=\"maxtickets\"><strong>Event capacity:</strong> {event.maxtickets}</p>\r\n                    <Link to={bookingURL} id='buytickets' className='button-link'>Reserve a seat</Link>\r\n                </>\r\n            )}\r\n            {isTicketed && (\r\n                <>\r\n                    <p className=\"maxtickets\"><strong>Event capacity:</strong> {event.maxtickets}</p>\r\n                    <p className=\"entryfee\"><strong>Entry:</strong> ${event.entryfee}</p>\r\n                    <Link to={bookingURL} id='buytickets' className='button-link'>Buy Tickets</Link>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventCard;","// src/pages/events.js\r\nimport React from 'react';\r\nimport Layout from '../components/layout'; // Import the layout component\r\nimport { graphql, useStaticQuery } from \"gatsby\"\r\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\r\nimport EventCard from '../components/EventCard'; // Import EventCard component\r\n\r\nconst EventPage = () => {\r\n    const data = useStaticQuery(graphql`\r\n        query {\r\n            allEventsJson {\r\n                nodes {\r\n                    eventID\r\n                    title\r\n                    description\r\n                    image\r\n                    datetime\r\n                    entryfee\r\n                    ticketedevent\r\n                    maxtickets\r\n                }\r\n            }\r\n            allFile(filter: {extension: { in: [\"jpeg\", \"jpg\", \"png\"] } }) {\r\n                nodes {\r\n                    relativePath\r\n                    childImageSharp {\r\n                        gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n                    }\r\n                }\r\n            }\r\n            heroImage: file(relativePath: { eq: \"david-iskander-8hFiT80X-6o-unsplash.jpg\" }) {\r\n                childImageSharp {\r\n                    gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\r\n                }\r\n            }\r\n        }\r\n    `);\r\n\r\n    /*useEffect(() => {\r\n        new Masonry('.event-card-container', {\r\n            itemSelector: '.event-card',\r\n            columnWidth: '.event-card',\r\n            percentPosition: true,\r\n            gutter: '.event-card-spacer',\r\n            horizontalOrder: true,\r\n            fitwidth: true,\r\n            transitionDuration: '0.1s'\r\n        });\r\n    }, []);*/\r\n\r\n    return (\r\n        <Layout>\r\n            <section>\r\n                <div id=\"events-hero\">\r\n                    <GatsbyImage image={getImage(data.heroImage)} alt=\"\" className=\"hero-bgImage\" />\r\n                    <div className=\"hero-text\">\r\n                        <div className='hero-textBG'></div>\r\n                        <h1>Upcoming Events</h1>\r\n                        <p>\r\n                            Come along to our popular events hosted each week.<br />\r\n                            From book readings and signings to high tea to poetry nights and comedy festivals, you're sure to find something that will tickle your fancy.\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"event-card-container\">\r\n                    {data.allEventsJson.nodes.map(card => {\r\n                        const eventDate = new Date(card.datetime);\r\n                        const dateOptions = { \r\n                            weekday: 'long',\r\n                            day: '2-digit', \r\n                            month: 'short',\r\n                            hour: 'numeric', \r\n                            minute: '2-digit',\r\n                            hour12: true\r\n                        };\r\n                        \r\n                        const formattedDate = new Intl.DateTimeFormat('en-AU', dateOptions).format(eventDate)\r\n                        const imageFile = data.allFile.nodes.find(n => n.relativePath === card.image);\r\n                        return <EventCard key={card.id} event={card} image={getImage(imageFile)} formattedDate={formattedDate} />;\r\n                    })}\r\n                </div>\r\n            </section>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default EventPage;"],"names":["_ref","event","image","formattedDate","isTicketed","ticketedevent","limitedSeats","maxtickets","entryfee","bookingURL","eventID","React","className","GatsbyImage","alt","imgalttext","title","description","Link","to","id","EventPage","data","useStaticQuery","Layout","getImage","heroImage","allEventsJson","nodes","map","card","eventDate","Date","datetime","Intl","DateTimeFormat","weekday","day","month","hour","minute","hour12","format","imageFile","allFile","find","n","relativePath","EventCard","key"],"sourceRoot":""}